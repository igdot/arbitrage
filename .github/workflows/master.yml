name: master
run-name: ${{ github.actor }} run build, test and deploy action
on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: '1.20'
      - name: Display go version
        run: go version
      - name: Update dependencies
        run: go mod tidy
      - name: Build
        run: go build -o dist/app main.go

  test:
    needs: build
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: '1.20'
      - name: Install test lib
        run: go install gotest.tools/gotestsum@latest
      - name: Test
        run: gotestsum --format=testname -- ./... -tags=units,integrations -cover
        env:
          DB_URL: postgresql://postgres:postgres@localhost:5432/arbitrage?sslmode=disable

  lint:
    needs: [ build, test ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: '1.20'
      - name: Display go version
        run: go version
      - name: Go linter installation
        run: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.52.2
          && curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s v1.52.2
          && wget -O- -nv https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s v1.52.2
      - name: Go linter version
        run: golangci-lint --version
      - name: Go linter run
        run: golangci-lint run

#  deploy:
#    needs: lint
#    runs-on: ubuntu-latest
#    steps:
#      - name: Install SSH Key
#        run: |
#          install -m 600 -D /dev/null ~/.ssh/id_rsa &&
#          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa &&
#          ssh-keyscan -H ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts
#      - name: Connect to server and pull
#        run: ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd ${{ github.event.repository.name }} && git checkout master && git pull && exit"
#      - name: SSH cleanup
#        run: rm -rf ~/.ssh